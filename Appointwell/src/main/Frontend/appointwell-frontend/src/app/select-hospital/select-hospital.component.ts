import { Component, OnInit } from '@angular/core';
import { AppointmentService } from '../Service/appointment.service';
import { Router } from '@angular/router';
import { NgForOf, NgIf } from '@angular/common';
import { ApiService } from '../Service/api-service';
import { Hospital } from '../models/Hospital';
import { MapViewComponent } from '../map-view/map-view.component';
import { FormsModule } from '@angular/forms';
import { TextToSpeechService } from '../Service/TextToSpeechService';

@Component({
  selector: 'app-select-hospital',
  standalone: true,
  imports: [
    NgForOf,
    MapViewComponent,
    FormsModule,
    NgIf
  ],
  templateUrl: './select-hospital.component.html',
  styleUrls: ['./select-hospital.component.css']
})
export class SelectHospitalComponent implements OnInit {
  hospitals: Hospital[] = [];
  userLocationName: string = 'loyalist college in toronto';
  userLocation: string = '43.811630, -79.346260'; // Default location
  hospitalNames: string[] = [];

  constructor(
    private appointmentService: AppointmentService,
    private router: Router,
    private apiService: ApiService,
    private ttsService: TextToSpeechService,
  ) {}

  // Select a hospital and navigate to the symptoms list page
  selectHospital(hospital: Hospital): void {
    this.appointmentService.setHospital(hospital);
    this.ttsService.speak("You selected " + hospital.name);
    this.router.navigate(['/list-symptoms']);
  }

  ngOnInit(): void {
    if (this.hospitals.length > 0) return; // Ensure ngOnInit runs once
    console.log("ngOnInit triggered");

    this.ttsService.speak("Your Location is set to " + this.userLocationName);

    this.apiService.getAllHospitals().subscribe(
      data => {
        this.hospitals = data;
        this.assignDiscountsAndDistances();
        console.log('Fetched hospitals:', this.hospitals);
        this.hospitalNames = this.hospitals.map(hospital => hospital.name);
        console.log(this.hospitalNames);
        this.hospitalNames.forEach(name => this.ttsService.speak(name));
      },
      error => {
        console.error('Error fetching hospitals:', error);
      }
    );
  }

  // Assign discounts and calculate distances for each hospital
  assignDiscountsAndDistances(): void {
    const [userLat, userLng] = this.userLocation.split(',').map(Number);
    let farthestDistance = 0;

    // @ts-ignore
    let farthestHospital: Hospital = new Hospital();

    this.hospitals.forEach(hospital => {
      const distance = this.calculateDistance(userLat, userLng, hospital.latitude, hospital.longitude);
      hospital.distance = distance;

      // Check if this hospital is the farthest
      if (distance > farthestDistance) {
        farthestDistance = distance;
        farthestHospital = hospital;
      }
    });

    // Assign discount to the farthest hospital
    if (farthestHospital) {
      farthestHospital.isFarthest = true;
      farthestHospital.discount = '10% off'; // Example discount
      this.ttsService.speak(`The hospital farthest from your location, ${farthestHospital.name}, has a discount.`);
    }
  }

  // Calculate distance between two geographic coordinates
  calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = this.deg2rad(lat2 - lat1);
    const dLng = this.deg2rad(lng2 - lng1);
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
      Math.sin(dLng / 2) * Math.sin(dLng / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distance in kilometers
    return distance;
  }

  // Convert degrees to radians
  deg2rad(deg: number): number {
    return deg * (Math.PI / 180);
  }

  // Use the current location based on geolocation API
  useCurrentLocation(): void {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        position => {
          this.userLocation = `${position.coords.latitude}, ${position.coords.longitude}`;
          console.log('Current location:', this.userLocation);
          this.assignDiscountsAndDistances();
        },
        error => {
          console.error('Geolocation error:', error);
          alert('Could not retrieve your location. Please try again or enter it manually.');
        }
      );
    } else {
      alert('Geolocation is not supported by this browser.');
    }
  }

  onSpeak(text: string): void {
    this.ttsService.speak(text);
  }
}






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































